syntax = "proto2";
package schema.improbable.abyssal.dev;

import "improbable/entity_state.proto";

import "improbable/abyssal/dev/entity_info_type.proto";

// Events
// Set an int value.
message SetIntValue {
    // The entity to modify.
  optional int64 entityId = 1 [(improbable.entity_id) = true];
  // The info type.
  optional improbable.abyssal.dev.EntityInfoType infoType = 2;
  // The new value.
  optional int32 newValue = 3;
}
     
// Set a float value.
message SetFloatValue {
    // The entity to modify.
  optional int64 entityId = 1 [(improbable.entity_id) = true];
  // The info type.
  optional improbable.abyssal.dev.EntityInfoType infoType = 2;
  // The new value.
  optional float newValue = 3;
}
     
// Set a double value.
message SetDoubleValue {
    // The entity to modify.
  optional int64 entityId = 1 [(improbable.entity_id) = true];
  // The info type.
  optional improbable.abyssal.dev.EntityInfoType infoType = 2;
  // The new value.
  optional double newValue = 3;
}
     
// Controls to modify entity info.
message EntityInfoModifierData {
  // Can the entity modify others?
  optional bool canModify = 1;  repeated SetIntValue setIntValue = 1000 [(improbable.state_event) = true];
  repeated SetFloatValue setFloatValue = 1001 [(improbable.state_event) = true];
  repeated SetDoubleValue setDoubleValue = 1002 [(improbable.state_event) = true];
}

extend improbable.EntityState {
  optional EntityInfoModifierData entityInfoModifier = 1020
    [(improbable.entity_state_options) = {
      state_synchronized: true
      state_queryable: true
    }];
}
     